{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useMediaQuery","theme","createMuiTheme","palette","type","primary","main","grey","secondary","classes","makeStyles","root","padding","spacing","height","display","flexDirection","justifyContent","flexGrow","paper","textAlign","color","text","useStyles","useState","linkedFile","setLinkedFile","linkedFileField","setLinkedFileField","className","ThemeProvider","CssBaseline","AppBar","position","Toolbar","Typography","variant","title","Container","maxwidth","Grid","container","item","xs","FormControl","Box","m","pt","component","Button","onClick","TextField","label","id","onChange","e","target","value","Link","href","align","style","wordWrap","wordBreak","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAAe,I,yJCiIAA,MAzGf,WACwBC,YAAc,gCAEpC,IAAMC,EAAQC,YAAe,CAC3BC,QACI,CACEC,KAAM,OACNC,QAAS,CAAEC,KAAMC,IAAK,MACtBC,UAAW,CAAEF,KAAMC,IAAK,SAwB1BE,EAfYC,aAAW,SAACT,GAAD,MAAY,CACvCU,KAAM,CACJC,QAASX,EAAMY,QAAQ,EAAG,GAC1BC,OAAQ,IACRC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,SAAU,GAEZC,MAAO,CACLP,QAASX,EAAMY,QAAQ,GACvBO,UAAW,SACXC,MAAOpB,EAAME,QAAQmB,KAAKd,cAGde,GAChB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA8CF,mBAAS,IAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KAEA,OACE,qBAAKC,UAAU,MAAf,SACE,eAACC,EAAA,EAAD,CAAe7B,MAAOA,EAAtB,UACE,cAAC8B,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAQC,SAAS,QAAjB,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKP,UAAWpB,EAAQ4B,MAA5C,4BAMJ,eAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,cAACL,EAAA,EAAD,IACA,cAACM,EAAA,EAAD,CAAMC,WAAS,EAAC5B,QAAS,EAAzB,SACE,cAAC2B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKC,EAAG,EAAGC,GAAI,EAAf,SACE,cAACZ,EAAA,EAAD,CAAYC,QAAQ,KAAKY,UAAU,IAAnC,4LAMF,cAACH,EAAA,EAAD,CAAKC,EAAG,EAAGC,GAAI,EAAf,SACE,cAACE,EAAA,EAAD,CACEC,QAAS,WACPxB,EAAc,IACdE,EAAmB,KAHvB,qBASF,cAACiB,EAAA,EAAD,CAAKC,EAAG,EAAGC,GAAI,EAAf,SACE,cAACI,EAAA,EAAD,CACEC,MAAM,MACNhB,QAAQ,WACRiB,GAAG,WACH,mBAAiB,iBACjBC,SAAU,SAACC,GACT7B,EAAc6B,EAAEC,OAAOC,OACvB7B,EAAmB2B,EAAEC,OAAOC,QAE9BA,MAAO9B,MAGX,cAACkB,EAAA,EAAD,CAAKC,EAAG,EAAGC,GAAI,EAAf,SACE,cAACW,EAAA,EAAD,CAAMC,KAAMlC,EAAZ,SACE,cAACU,EAAA,EAAD,CACEyB,MAAM,SACNC,MAAO,CACLC,SAAU,aACVC,UAAW,cAJf,SAOGtC,wBCxGRuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fb6be31a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from \"./logo.svg\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport {\n  AppBar,\n  Box,\n  Button,\n  Container,\n  FormControl,\n  Grid,\n  Input,\n  Link,\n  Paper,\n  TextField,\n  Toolbar,\n  Typography,\n  makeStyles,\n} from \"@material-ui/core\";\nimport { createTheme } from \"@material-ui/core/styles\";\nimport { purple, green, grey } from \"@material-ui/core/colors\";\n\nimport { ThemeProvider, CssBaseline, useMediaQuery } from \"@material-ui/core\";\nimport { createMuiTheme, responsiveFontSizes } from \"@material-ui/core/styles\";\n\nfunction App() {\n  let prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  prefersDarkMode = true;\n  const theme = createMuiTheme({\n    palette: prefersDarkMode\n      ? {\n          type: \"dark\",\n          primary: { main: grey[500] },\n          secondary: { main: grey[500] },\n        }\n      : {\n          type: \"light\",\n          primary: { main: grey[800] },\n          secondary: { main: grey[500] },\n        },\n  });\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      padding: theme.spacing(3, 2),\n      height: 200,\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n      color: theme.palette.text.secondary,\n    },\n  }));\n  const classes = useStyles();\n  const [linkedFile, setLinkedFile] = useState(\"\");\n  const [linkedFileField, setLinkedFileField] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <AppBar position=\"fixed\">\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              LinkedFile\n            </Typography>\n          </Toolbar>\n        </AppBar>\n\n        <Container maxwidth=\"sm\">\n          <Toolbar />\n          <Grid container spacing={3}>\n            <Grid item xs={12}>\n              <FormControl>\n                <Box m={3} pt={3}>\n                  <Typography variant=\"pf\" component=\"p\">\n                    Safari on iOS does not allow downloading a file once the\n                    link has been loaded (like a text file). Long-hold on the\n                    href link below to download your linked file from Safari.\n                  </Typography>\n                </Box>\n                <Box m={3} pt={3}>\n                  <Button\n                    onClick={() => {\n                      setLinkedFile(\"\");\n                      setLinkedFileField(\"\");\n                    }}\n                  >\n                    Clear\n                  </Button>\n                </Box>\n                <Box m={3} pt={3}>\n                  <TextField\n                    label=\"url\"\n                    variant=\"outlined\"\n                    id=\"my-input\"\n                    aria-describedby=\"my-helper-text\"\n                    onChange={(e) => {\n                      setLinkedFile(e.target.value);\n                      setLinkedFileField(e.target.value);\n                    }}\n                    value={linkedFileField}\n                  />\n                </Box>\n                <Box m={3} pt={3}>\n                  <Link href={linkedFile}>\n                    <Typography\n                      align=\"center\"\n                      style={{\n                        wordWrap: \"break-word\",\n                        wordBreak: \"break-word\",\n                      }}\n                    >\n                      {linkedFile}\n                    </Typography>\n                  </Link>\n                </Box>\n              </FormControl>\n            </Grid>\n          </Grid>\n        </Container>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}